<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

spd     = 4;
j_spd   = 5;    // Jump speed
f_spd   = 0.3;  // Fall speed
spd_df  = 0.7;  // Decrease factor
hsp     = 0;
vsp     = 5;
ho      = 0;    // Horizontal offset
vo      = 0;    // Vertical offset
can_doublejump = false;
pickup          = false;
pickup_time     = room_speed*2;
pickup_timer    = pickup_time;
depth = -9999;
image_index = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision

// Loop trough every collision object
for(var i = 0; i &lt; instance_number(obj_collision_parent); i++) {
    var obj = instance_find(obj_collision_parent, i);

    // Horizontal collision
    if(place_meeting(x + hsp, y, obj)) {
        if(global.color != obj.image_blend) {
            if(!place_meeting(x + sign(hsp), y, obj)) {
                hsp = sign(hsp);
            } else hsp = 0;
        }
    }
}

x += hsp;

// Loop trough every collision object
for(var i = 0; i &lt; instance_number(obj_collision_parent); i++) {
    var obj = instance_find(obj_collision_parent, i);
    
    // Vertical collision
    if(place_meeting(x, y + vsp, obj)) {
        if(global.color != obj.image_blend) {
            if(!place_meeting(x, y + sign(vsp), obj)) {
                vsp = sign(vsp);
            } else vsp = 0;
        }
    }
}

y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

vsp += f_spd;
hsp *= spd_df;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input

key_left    = keyboard_check(vk_left)           ||  keyboard_check(ord("A"));
key_right   = keyboard_check(vk_right)          ||  keyboard_check(ord("D"));
key_jump    = keyboard_check_pressed(vk_space)  ||  keyboard_check_pressed(vk_up)   ||  keyboard_check_pressed(ord("W"));

key_left = -key_left;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement update

if(-key_left || key_right) {
    hsp = (key_left + key_right) * spd;
}

if(place_meeting(x, y + 1, obj_collision_parent)) {
    if(key_jump) {
        vsp = -j_spd;
    }
    can_doublejump = true;
} else {
    if(!can_doublejump) {
        if(vsp &gt;= 0) {
            ho = lerp(ho, 0, 0.2);
            vo = lerp(vo, 0, 0.2);
        } else {
            ho = lerp(ho, 2, 0.3);
            vo = lerp(vo, 2, 0.3);
        }
    }
    if(key_jump &amp;&amp; can_doublejump) {
        vsp = -j_spd;
        can_doublejump = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pickup

if(pickup == true) {
    //hsp = 0;
    pickup_timer--;
    if(pickup_timer &lt;= 0) {
        pickup_timer = pickup_time;
        pickup = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Outside room test

x = obj_start.x;
y = obj_start.y;
global.invisible = false;
with(obj_wall_invisible) {
    invisible = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw player

draw_sprite_pos(
    sprite_index, image_index,
    x - hsp/2 + ho,
    y + hsp/3 + vo,
    x + sprite_width - hsp/2 - ho,
    y - hsp/3 + vo,
    x + sprite_width - ho,
    y + sprite_height,
    x + ho,
    y + sprite_height,
    image_alpha
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
